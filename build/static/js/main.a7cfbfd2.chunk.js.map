{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","todoList","activeItem","id","title","completed","editing","handleChange","bind","fetchTasks","handleSubmit","getCookie","startEdit","deleteItem","strikeToggle","this","fetch","then","response","json","data","setState","event","value","target","preventDefault","csrftoken","console","log","url","method","headers","body","JSON","stringify","catch","error","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","task","status","alert","tasks","self","className","onSubmit","onChange","type","map","index","key","onClick","style","width","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a7cfbfd2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todoList: [],\n      activeItem: {\n        id:null,\n        title: '',\n        completed: false,\n      },\n      editing : false,\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.fetchTasks = this.fetchTasks.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.getCookie = this.getCookie.bind(this);\n    this.startEdit = this.startEdit.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.startEdit = this.startEdit.bind(this);\n    this.strikeToggle = this.strikeToggle.bind(this);\n  }\n\n  // done before the INITIAL render of a component\n  componentWillMount() {\n    this.fetchTasks()\n  }\n\n  fetchTasks(){\n    let url = `http://127.0.0.1:8000/api/list/`\n\n    fetch(url)\n    .then(response => response.json())\n    .then(data =>  this.setState({\n      todoList: data\n    }) \n    )\n  }\n\n  handleChange(event){\n    let value = event.target.value\n\n    this.setState({\n      activeItem:{\n        ...this.state.activeItem,\n        title: value,\n      }\n    })\n\n  }\n\n  handleSubmit(event){\n    event.preventDefault()\n    var csrftoken = this.getCookie('csrftoken');\n\n    console.log('ITEM:', this.state.activeItem)\n    \n    let url = `http://127.0.0.1:8000/api/create/`;\n    if (this.state.editing === true){\n      url = `http://127.0.0.1:8000/api/update/${this.state.activeItem.id}`;\n      this.setState({ editing: false })\n    }\n\n    fetch(url, { \n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json',\n        'X-CSRFToken' : csrftoken,\n      },\n      body: JSON.stringify({  \n        id: this.state.activeItem.id,\n        title : this.state.activeItem.title,\n        completed: this.state.activeItem.completed  \n      })\n     }).then( (response)  =>{\n        this.setState({ \n          activeItem: {\n            id:null,\n            title: '',\n            completed: false,\n          }, \n        });\n        this.fetchTasks();\n     }).catch(\n      error => console.log('ERROR : '+ error)\n    )\n  }\n\n  getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n  }\n\n  startEdit(task){\n    this.setState({ \n      activeItem: task,\n      editing: true,\n    })\n    console.log(task)\n    console.log(this.state.activeItem)\n  }\n\n  deleteItem(task){\n    let url = `http://127.0.0.1:8000/api/delete/${task.id}`\n    var csrftoken = this.getCookie('csrftoken')\n\n    fetch(url,{\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrftoken,\n      }\n    }).then((response) => {\n      if (response.status === 200){\n        alert('delete success')\n      }\n      this.fetchTasks()\n    })\n  }\n\n\n  strikeToggle(task){\n    let csrftoken = this.getCookie('csrftoken')\n    let url = `http://127.0.0.1:8000/api/update/${task.id}`\n    fetch(url,{\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-CSRFToken': csrftoken,\n      },\n      body: JSON.stringify({\n        'id' : task.id,\n        'title': task.title,\n        'completed': !task.completed,\n      })\n    }).then((response) => {\n      this.fetchTasks();\n    }).catch((error) => {\n      console.log(error)\n    })\n  }\n\n  render() {\n    let tasks = this.state.todoList\n    let active_title = this.state.activeItem.title\n    let self = this\n\n    return (\n    <div>\n      <div className='container'>\n      <div>\n        <div className=\"border border-light p-3 mb-4 bg-info\">\n          \n          <div className=\"d-flex align-items-center justify-content-center\" >\n            <form onSubmit={ this.handleSubmit }>\n              <input onChange={ this.handleChange } type=\"text\" name='task_name' value={this.state.activeItem.title} className='p-2 bd-highlight col-example rounded-0'></input>\n              <input type=\"submit\" value=\"Submit\" className='p-2 bd-highlight col-example rounded-0 btn-warning'></input>\n            </form>\n          </div>\n          \n          <div className=\"mt-3\">\n            {tasks.map( function (task,index) {\n                return(\n\n                  <div key= { index } className=\"d-flex align-items-center justify-content-center\" >\n\n                    <span onClick={ () => self.strikeToggle(task) }  \n                          className=\"p-2 bd-highlight col-example bg-success mt-2 text-light text-center\" \n                          style={{width: 500}}>\n                          {\n                            task.completed ? ( <strike>{task.title}</strike> ) : <span>{task.title}</span>  \n                          }\n                    </span>\n\n                    <a onClick={ () => self.startEdit(task) } className='rounded-0 btn-warning p-2 text-center' style={ { width:50 }}>Edit</a>\n                    <a onClick={ () => self.deleteItem(task) } className='rounded-0 btn-danger p-2 text-center' style={ { width:40 }}>-</a>\n                  </div>\n\n                )\n              } )}\n          </div>\n              \n        </div>\n      </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}